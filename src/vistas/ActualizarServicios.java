/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controlador.conexionMysql;
import modelo.Clientes;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADSI
 */
public class ActualizarServicios extends javax.swing.JInternalFrame {
    
public String comandosql="Select * from servicios";
DefaultTableModel TablaServicios;
String NombresColumnas[]= new String[] {"IDSERVICIO","NOMBRE SERVICIO","PRECIO"};
    
    /**
     * Creates new form ActualizarServicios
     * @throws java.sql.SQLException
     */
    public ActualizarServicios() throws SQLException {
        TablaServicios=new DefaultTableModel(null,NombresColumnas);
      //  TablaServicios= new DefaultTableModel(null,)
        initComponents();
        MostrarInformacion();
    }
    
    public void limpiarTabla()
    {   int i,j=0,nfilas;
        nfilas=TablaServicios.getRowCount();
        System.out.println("el numero de filas detectadas es" + nfilas);
        for(i=0;i<nfilas;i++)
    {   TablaServicios.removeRow(j); // borra la primera fila y despues de cada borrado
        System.out.println("vamos en el borrado "+i); // la primera fila cambia y sigue hasta 
    }      // borrar todas las filas de la tabla
    
        nfilas=TablaServicios.getRowCount();
        etiNumFilas.setText("Hay "+nfilas+" registros en la tabla");    
    }        

    private void MostrarInformacion() {
        int nFilas=0;
        try{
            conexionMysql ConectBD=new conexionMysql();
            Statement sentencia;
            ResultSet resultado;
            Object nuevafila[]= new Object[3]; //3 filas
            
            ConectBD.iniciarConexion();
            Connection conn=ConectBD.getMyConnection();
            sentencia= conn.createStatement();
            
            // JOptionPane.showMessageDialog(null,"La consulta sera"+comandosql);
            resultado = sentencia.executeQuery(comandosql);
            ResultSetMetaData meta = resultado.getMetaData();
            int columnas = meta.getColumnCount();  //Mientras haya registros 
            System.out.println("aqui vamos...");
            
            while (resultado.next()) 
            {  System.out.println("estoy dentro del while");
           /*
            nuevafila[0]=resultado.getObject(1);
            nuevafila[1]=resultado.getObject(2);
            nuevafila[2]=resultado.getObject(3);
            nuevafila[3]=resultado.getObject(4); */
            for (int i = 0; i < columnas; i++) 
                {nuevafila[i]=resultado.getObject(i+1);
                
                }        
                
                TablaServicios.addRow(nuevafila);
                System.out.println("fin del for");
                 
            }
        ConectBD.Cerrar();
        nFilas=TablaServicios.getRowCount();
        etiNumFilas.setText("Hay "+nFilas+" registros en la tabla");
 //        JOptionPane.showMessageDialog(null,"La consulta fue realizada");
      } catch (SQLException ex) {
          Logger.getLogger(ActualizarServicios.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        OrdenId = new javax.swing.JButton();
        OrdenNombre = new javax.swing.JButton();
        OrdenPrecio = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CajaNombreServic = new javax.swing.JTextField();
        CajaPrec = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        etiNumFilas = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CajaID = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("ACTUALIZAR SERVICIOS");
        setToolTipText("");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/loop.png"))); // NOI18N

        jTable1.setModel(TablaServicios);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        OrdenId.setText("POR ID");
        OrdenId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdenIdActionPerformed(evt);
            }
        });

        OrdenNombre.setText("POR NOMBRE");
        OrdenNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdenNombreActionPerformed(evt);
            }
        });

        OrdenPrecio.setText("POR PRECIO");
        OrdenPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrdenPrecioActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("FILTRAR POR:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("CAMPOS PARA ACTUALIZAR");

        CajaPrec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CajaPrecActionPerformed(evt);
            }
        });

        jButton4.setText("ACTUALIZAR SERVICIO");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        etiNumFilas.setText("#Cajas");

        jLabel3.setText("ID del Servicio:");

        jLabel4.setText("Nombre del Servicio");

        jLabel5.setText("Precio del Servicio");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/loop (1).png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OrdenId)
                                    .addComponent(etiNumFilas))
                                .addGap(36, 36, 36)
                                .addComponent(jLabel1))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(CajaNombreServic, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton4))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(OrdenNombre)
                                    .addGap(56, 56, 56)
                                    .addComponent(OrdenPrecio)
                                    .addGap(159, 159, 159)))
                            .addComponent(CajaID, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CajaPrec, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addGap(54, 54, 54))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(etiNumFilas)
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OrdenId)
                    .addComponent(OrdenNombre)
                    .addComponent(OrdenPrecio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CajaID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CajaNombreServic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(24, 24, 24)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CajaPrec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OrdenIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdenIdActionPerformed
        // TODO add your handling code here:
        comandosql="Select * from servicios order by idServicio";
        limpiarTabla();
        MostrarInformacion();
    }//GEN-LAST:event_OrdenIdActionPerformed

    private void OrdenNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdenNombreActionPerformed
        // TODO add your handling code here:
        comandosql="Select * from servicios order by nombreServicio";
        limpiarTabla();
        MostrarInformacion();
    }//GEN-LAST:event_OrdenNombreActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int filaElegida;
        System.out.println("La fila seleccionada es :"+jTable1.getSelectedRow());
        // la linea de arriba, traera el numero de la fila donde se dio clic
        // se empieza a contar a partir de cero
        System.out.println("El valor obtenido es :"+ TablaServicios.getValueAt(jTable1.getSelectedRow(),0));
        CajaID.setText(""+TablaServicios.getValueAt(jTable1.getSelectedRow(),0));
        CajaNombreServic.setText(""+TablaServicios.getValueAt(jTable1.getSelectedRow(),1));
        CajaPrec.setText(""+TablaServicios.getValueAt(jTable1.getSelectedRow(),2));
      //   System.out.println("El valor obtenido es :"+  modeloejemplo.getValueAt(jTable1.getSelectedRow(),0));
     ///   cajaId.setText(""+modeloejemplo.getValueAt(jTable1.getSelectedRow(),0));
        // En este caso, se pone cero, para que traiga el contenido de esa fila, con la primera columna
        // donde por lo general va la llave primaria, el idpaciente en este caso.
        // Aprendiz: Ya una vez se obtiene el idpaciente, se pueden hacer una consulta, guardar en unas cajas de texto
        // agregar un boton actualizar, y ejecutar un procedurede update
        // NOTA:
        // En este ejemplo, las cajas y el boton, son una ilustracion, pero hacerlo es facil, es hacer practicamente
        //lo mismo que una insercion. Eso ya depende de los RF y los RNF de cada proyecto.
        // La actualizacion, debera incluir que si se permite cambiar el id, este no se repita...
        // Al finalizar la actualizacion, se debera refrescar la tabla, para que muestre la informacion con cambios.
    }//GEN-LAST:event_jTable1MouseClicked

    private void OrdenPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdenPrecioActionPerformed
        // TODO add your handling code here:
        comandosql="Select * from servicios order by precio";
        limpiarTabla();
        MostrarInformacion();
    }//GEN-LAST:event_OrdenPrecioActionPerformed

    public int ServicioExistente(String Nombre) // metodo que permite validar si el id ya exixte en la BD para la insercion
    {
    int esta=0;
     String comandosql="SELECT * FROM `servicios` WHERE `nombreServicio`='"+Nombre+"'";
     Statement sentencia;
     ResultSet resultado;// GUARDA EL RESULTADO DE LA CONSULTA
     
         conexionMysql ConectBD2=new conexionMysql();// se crea un objeto de la clase conexionMysql
         ConectBD2.iniciarConexion();// el objeto inicia la conexion y se hace el llamado al metodo que se creo en el controlador
         Connection conn1=ConectBD2.getMyConnection();
        try {
            sentencia= conn1.createStatement();
            resultado = sentencia.executeQuery(comandosql);
          //  ResultSetMetaData meta = resultado.getMetaData();
             while (resultado.next()) 
            { 
                esta=1;
                JOptionPane.showMessageDialog(null, "El Nombre ya existe " +Nombre);
            }
        } catch (SQLException ex) {
            Logger.getLogger(InsertarServiciosProced.class.getName()).log(Level.SEVERE, null, ex);
        }
    return esta;
    }
    
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int a;
        a=ServicioExistente(CajaID.getText());
        if (a==0){
        try{
            String c="";
            if(CajaNombreServic.getText().isEmpty()){
                c=c+",NOMBRE SERVICIO";
            }
            if(CajaPrec.getText().isEmpty()){
                c=c+", PRECIO";
            }
            if(CajaNombreServic.getText().isEmpty() || CajaPrec.getText().isEmpty() ){
                JOptionPane.showMessageDialog(null,"Faltó ingresar información en los siguientes campos: "+c+".","Falta de información",JOptionPane.CANCEL_OPTION);
            }else{   
            Clientes C; 
            conexionMysql ConectBD1=new conexionMysql();// se crea un objeto de la clase conexionMysql
            ConectBD1.iniciarConexion();// el objeto inicia la conexion y se hace el llamado al metodo que se creo en el controlador
            Connection conn1=ConectBD1.getMyConnection();// se crea una variable de
            CallableStatement sentenciaCargada = conn1.prepareCall("{call ACTUALIZAR_SERVICIOS(?,?,?)}");
            sentenciaCargada.setString(2,CajaNombreServic.getText());
            sentenciaCargada.setString(3,CajaPrec.getText());
           // sentenciaCargada.setFloat(title, TOP_ALIGNMENT); .setString(3,CajaPrecio.getText());
            sentenciaCargada.execute();
            JOptionPane.showMessageDialog(null,"Servicio "+ CajaNombreServic.getText() +" fue actualizado");
            ConectBD1.Cerrar();
            }
        }
          catch (SQLException ex) {
          Logger.getLogger(InsertarServiciosProced.class.getName()).log(Level.SEVERE, null, ex);// nombre de la clase
        }
      }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void CajaPrecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CajaPrecActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CajaPrecActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CajaID;
    private javax.swing.JTextField CajaNombreServic;
    private javax.swing.JTextField CajaPrec;
    private javax.swing.JButton OrdenId;
    private javax.swing.JButton OrdenNombre;
    private javax.swing.JButton OrdenPrecio;
    private javax.swing.JLabel etiNumFilas;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    
}
